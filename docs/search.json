[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 utDataStoR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/150_percent_graduation_rate.html","id":"cohort","dir":"Articles","previous_headings":"","what":"Cohort","title":"150% Graduation Rate","text":"cohort group students shared characteristics tracked reporting purposes. New, degree seeking students assigned cohort enter University. placed cohort based data census enrollment snapshot. eight cohorts students placed : Full-time, Bachelors degree seeking, freshman Full-time, Bachelors degree seeking, transfer Part-time, Bachelors degree seeking, freshman Part-time, Bachelors degree seeking, transfer Full-time, Associates degree seeking, freshman Full-time, Associates degree seeking, transfer Part-time, Associates degree seeking, freshman Part-time, Associates degree seeking, transfer 150 percent graduation rate metrics track cohorts graduation. 150 percent graduation rate tracks two eight cohorts (Full-time, Bachelors degree seeking, freshman; Full-time, Associates degree seeking, freshman) looks Fall cohort. 150 percent graduation rate starts cohort students tracks student graduated degree 150% time degree cohort start date; exclusions removed metric. denominator metric number students within cohort exclusion flag. numerator metric number students denominator exclusion flag graduated 150% time awarded degree. metric 6-year lag since 150 percent time bachelors degree 6 years. Students Fall 2016 cohort August 31, 2022 earn bachelor’s degree. Students must earn: Certificate <= 29 credit hours within 1 year Certificate 30 < 60 credit hours 1 1/2 years Graduation rate tracks cohort students, exclusions removed, 6 years see student earns credential within 150% degree time (150% bachelor degree 6 years). looking full-time students (part-time students aren’t expected graduate 150% time) See Cohort Creation additional information. cohort students degree seeking students (degree seeking students cohort). students conflicts program student type census. students GCO student type F, program ND-CONC (HS Concurrent Enrollment). ’s using cohorts data errors still exist.","code":""},{"path":"/articles/cohort.html","id":"criteria-for-cohort-assignment","dir":"Articles","previous_headings":"","what":"Criteria for Cohort Assignment:","title":"Cohort","text":"Cohort assignment driven following fields: Enrollment status (full-time/part-time) based credits census. Identified bachelors associates degree-seeking census. Level id Undergraduate census. Degree level (primary degree ID) declared program census. Student type Freshman Transfer census. Students placed cohort , term classified Freshman (F) Transfer (T). student types undergraduate degree-seeking students. assigned, students remain cohort. Readmitted students retain original cohort. student student type High School (H) enrolls degree seeking student graduate high school assigned student type Freshman (F) Transfer (T) placed cohort.","code":""},{"path":"/articles/cohort.html","id":"non-cohort-students","dir":"Articles","previous_headings":"","what":"Non-Cohort Students:","title":"Cohort","text":"Graduate students assigned cohort. graduate students may part cohort undergraduate studies, cohort assignments made graduate students. Non degree-seeking students. student student type Personal Interest, Non-Degree (P) moves degree-seeking program, get placed cohort. move student type Personal Interest, Non-Degree (P) Continuing Registration (C). never student type Freshman (F) Transfer (T) never placed cohort. Cohorts prior 2009 Edify. student placed cohort 2009, non-cohorted null. Students incorrect student type assignment Census Freshman (F) Transfer (T) placed cohort.","code":""},{"path":"/articles/cohort.html","id":"exclusions","dir":"Articles","previous_headings":"","what":"Exclusions","title":"Cohort","text":"Exclusions apply students passed away, permanently disabled, left military service, federal aid service, official church missions.","code":""},{"path":[]},{"path":"/articles/computations.html","id":"headcount","dir":"Articles","previous_headings":"Count","what":"Headcount","title":"Computations - utMetrics","text":"Headcount measure net unduplicated number students enrolled Utah Tech specific period time. Census headcount net unduplicated number students enrolled 15th day instruction academic term. Census headcount based snapshot data, headcount returns static headcount used reporting. End term headcount net unduplicated number students enrolled end semester high school concurrent enrollment grades entered. Based snapshot data, headcount returns static headcount used reporting.","code":""},{"path":"/articles/computations.html","id":"year","dir":"Articles","previous_headings":"Count > Headcount","what":"Year","title":"Computations - utMetrics","text":"Data reported season (Fall, Spring, Summer) Year. Season Year together referred Term. year table graph headcount metrics calendar year term code (.e. term code - 202440, Fall 2024, year 2024). headcount metric 5 recent years data available (Summer census 5 years data).","code":""},{"path":[]},{"path":"/articles/computations.html","id":"retention-rates","dir":"Articles","previous_headings":"Rate","what":"Retention Rates","title":"Computations - utMetrics","text":"Retention measure many students return UT. Retention calculated 3 ways: cohort retention, come back rate, return rate. Cohort retention starts cohort students (group students) tracks student re-enrolls (retains) semester removes exclusions. Come back rate looks degree seeking students enrolled semester tracks student re-enrolls (comes back) given semester removes exclusions. Return rate looks degree seeking students enrolled semester tracks student re-enrolls (returns) completes credential given semester removes exclusions. Retention rates also look different time periods: Fall Spring - Student enrolled Fall Census returned following Spring term (second semester). example enrolled Fall 2020, returned Spring 2021. Fall Fall - Student enrolled Fall Census returned following fall term (fall 2). example enrolled Fall 2020, returned Fall 2021. Returned 3rd Fall - Student enrolled Fall Census returned fall 2 years later (fall 3). example enrolled Fall 2020, returned Fall 2022. used cohort retention. Returned 4th Fall - Student enrolled Fall Census returned fall 3 years later (fall 4). example enrolled Fall 2020, returned Fall 2023. used cohort retention.","code":""},{"path":"/articles/computations.html","id":"year-1","dir":"Articles","previous_headings":"Rate > Retention Rates","what":"Year","title":"Computations - utMetrics","text":"Data reported season (Fall, Spring, Summer) Year. Season Year together referred Term. year table graph retention metrics cohort year tied calendar year cohort term code (.e. cohort term code - 202440, Fall 2024, year 2024) term year term measured. year reporting year. retention metric 5 recent years data available. retention metric needs 3 years complete data (returned 4th fall), metric show recent complete data (Cohort retention returned 4th fall 2023 cohort provided Fall 2026).","code":""},{"path":"/articles/computations.html","id":"graduation-rate","dir":"Articles","previous_headings":"Rate","what":"150% Graduation Rate","title":"Computations - utMetrics","text":"150% Graduation Rate tracks cohort students, removing exclusions, 6 years see student earns credential within 150% degree time (150% bachelor degree 6 years) manner similar IPEDS Graduation Rate.","code":""},{"path":"/articles/computations.html","id":"year-2","dir":"Articles","previous_headings":"Rate > 150% Graduation Rate","what":"Year","title":"Computations - utMetrics","text":"Data reported season (Fall, Spring, Summer) Year. Season Year together referred Term. year table graph 150 percent graduation metrics cohort year tied calendar year cohort term code (.e. cohort term code - 202440, Fall 2024, year 2024). year reporting year. retention metric 5 recent years data available. 150% graduation rate metrics require 6 years data complete. 150% graduation rate Fall 2023 cohort provided Fall 2029.","code":""},{"path":[]},{"path":"/articles/computations.html","id":"student-fte---full-time-equivalent","dir":"Articles","previous_headings":"Sum","what":"Student FTE - Full-time Equivalent","title":"Computations - utMetrics","text":"Full-Time Equivalent (FTE) number students university students attending full-time. calculated student credit hours course level. FTE undergraduate students takes total undergraduate student credit hours divides 15 credit hours. FTE graduate students takes total graduate student credit hours divides 10 credit hours.","code":""},{"path":"/articles/computations.html","id":"year-3","dir":"Articles","previous_headings":"Sum > Student FTE - Full-time Equivalent","what":"Year","title":"Computations - utMetrics","text":"Data reported season (Fall, Spring, Summer) Year. Season Year together referred Term. year table graph FTE metrics calendar year term code (.e. term code - 202440, Fall 2024, year 2024). FTE metric 5 recent years data available (Summer census 5 years data).","code":""},{"path":"/articles/full_time_equivalent.html","id":"undergraduate-fte","dir":"Articles","previous_headings":"","what":"Undergraduate FTE","title":"Full Time Equivalent","text":"Full-Time Equivalent (FTE) number students university students attending full-time. calculated course level student credit hours. FTE undergraduate students takes total undergraduate student credit hours divides 15 credit hours.","code":""},{"path":"/articles/full_time_equivalent.html","id":"graduate-fte","dir":"Articles","previous_headings":"","what":"Graduate FTE","title":"Full Time Equivalent","text":"FTE graduate students takes total graduate student credit hours divides 10 credit hours. FTE Census SQL FTE End Term SQL FTE reported USHE five times per fiscal year: Summer End Term Fall 3rd Week Census Fall End Term Spring 3rd Week Census Spring End Term USHE summarizes FTE credit hour type, residency, gender, budget. IPEDS calculates FTE 12 Month Enrollment survey based reporting calendar July 1, 20XX - June 20YY. Utah Tech excludes Summer academic terms reports Spring Fall term census data.","code":"/* This SQL query calculates Full-Time Equivalent (FTE) values for graduate,  undergraduate, and total students enrolled in census versions of courses. Does not include any fte for CE - Continuing Education courses */  WITH CTE_graduate_fte AS          (SELECT a.term_id,                  ROUND(SUM(a.attempted_credits) / 10, 2) as census_graduate_fte           FROM export.student_section_version a           WHERE a.is_enrolled IS TRUE             AND a.version_desc = 'Census'             AND a.course_level_id = 'GR'           GROUP BY a.term_id),       CTE_undergrad_fte AS          (SELECT a.term_id,                  ROUND(SUM(a.attempted_credits) / 15, 2) as census_undergrad_fte           FROM export.student_section_version a           WHERE a.is_enrolled IS TRUE             AND a.version_desc = 'Census'             AND a.course_level_id = 'UG'           GROUP BY a.term_id)  SELECT b.term_desc,        COALESCE(d.census_undergrad_fte, 0) AS census_undergrad_fte,        COALESCE(c.census_graduate_fte, 0) AS census_graduate_fte,        ROUND(COALESCE(c.census_graduate_fte, 0) + COALESCE(d.census_undergrad_fte, 0), 2) AS census_total_fte FROM export.student_section_version a          LEFT JOIN export.term b                    ON a.term_id = b.term_id          LEFT JOIN CTE_graduate_fte c                    ON a.term_id = c.term_id          LEFT JOIN CTE_undergrad_fte d                    ON a.term_id = d.term_id WHERE a.is_enrolled IS TRUE   AND a.version_desc = 'Census'   AND DATE_PART('year', NOW()) - b.academic_year_code :: INT <= 5 -- Current year plus last 5 years GROUP BY b.term_desc, c.census_graduate_fte, d.census_undergrad_fte ORDER BY b.term_desc; /* This SQL query calculates Full-Time Equivalent (FTE) values for graduate,  undergraduate, and total students enrolled in end of term versions of courses. Does not include any FTE for CE - Continuing Education courses */  WITH CTE_graduate_fte AS          (SELECT a.term_id,                  ROUND(SUM(a.attempted_credits) / 10, 2) as eot_graduate_fte           FROM export.student_section_version a           WHERE a.is_enrolled IS TRUE             AND a.version_desc = 'End of Term'             AND a.course_level_id = 'GR'           GROUP BY a.term_id),       CTE_undergrad_fte AS          (SELECT a.term_id,                  ROUND(SUM(a.attempted_credits) / 15, 2) as eot_undergrad_fte           FROM export.student_section_version a           WHERE a.is_enrolled IS TRUE             AND a.version_desc = 'End of Term'             AND a.course_level_id = 'UG'           GROUP BY a.term_id)  SELECT b.term_desc,        COALESCE(d.eot_undergrad_fte, 0) AS eot_undergrad_fte,        COALESCE(c.eot_graduate_fte, 0) AS eot_graduate_fte,        ROUND(COALESCE(c.eot_graduate_fte, 0) + COALESCE(d.eot_undergrad_fte, 0), 2) AS eot_total_fte FROM export.student_section_version a          LEFT JOIN export.term b                    ON a.term_id = b.term_id          LEFT JOIN CTE_graduate_fte c                    ON a.term_id = c.term_id          LEFT JOIN CTE_undergrad_fte d                    ON a.term_id = d.term_id WHERE a.is_enrolled IS TRUE   AND a.version_desc = 'End of Term'   AND DATE_PART('year', NOW()) - b.academic_year_code :: INT <= 5 -- Current year plus last 5 years GROUP BY b.term_desc, c.eot_graduate_fte, d.eot_undergrad_fte ORDER BY b.term_desc;"},{"path":"/articles/groups.html","id":"demographic-groups","dir":"Articles","previous_headings":"","what":"Demographic Groups","title":"Groups","text":"Data classification collected student time application admission. data stored student level, student table. data doesn’t change often, ever. data can pulled Current, End Term Census.","code":""},{"path":"/articles/groups.html","id":"gender","dir":"Articles","previous_headings":"Demographic Groups","what":"Gender","title":"Groups","text":"Gender biological sex student’s birth certificate. options : Male Female Unspecified","code":""},{"path":"/articles/groups.html","id":"ipeds-raceethnicity","dir":"Articles","previous_headings":"Demographic Groups","what":"IPEDS Race/Ethnicity","title":"Groups","text":"IPEDS Race/Ethnicity data reporting student’s race ethnicity multiracial students grouped one category. nine options: Hispanic American Indian/Alaskan Asian Black/African American Hawaiian/Pacific Islander White Multiracial Non-Resident Alien (visa’s) Unspecified","code":""},{"path":"/articles/groups.html","id":"minority","dir":"Articles","previous_headings":"Demographic Groups","what":"Minority","title":"Groups","text":"Minority students students white, non-resident alien, unspecified. options : Minority Non-minority","code":""},{"path":"/articles/groups.html","id":"bipoc","dir":"Articles","previous_headings":"Demographic Groups","what":"BIPOC","title":"Groups","text":"BIPOC students whose race/ethnicity black, indigenous, people color (Hispanic, Asian multiracial). options : BIPOC non-BIPOC","code":""},{"path":"/articles/groups.html","id":"citizenship","dir":"Articles","previous_headings":"Demographic Groups","what":"Citizenship","title":"Groups","text":"Citizenship student’s relationship United States. options : 1 - US Citizen 2 - Non-Res Alien-Visa temp bas 3 - Res Alien-immigrant status 4 - Non-Citizen National US 5 - Non-immigrant Alien 53B-8-106 6 - Deferred Action 9 - Student curr defined ","code":""},{"path":"/articles/groups.html","id":"international-student","dir":"Articles","previous_headings":"Demographic Groups","what":"International Student","title":"Groups","text":"international student student foreign country (citizenship code Non_Res Alien-Visa) comes US take classes temporary F-1 visa. subset Non-Resident Alien students (see IPEDS Race/Ethnicity). sql output TRUE student international student.","code":""},{"path":"/articles/groups.html","id":"age-band","dir":"Articles","previous_headings":"Demographic Groups","what":"Age Band","title":"Groups","text":"Age old student today (day snapshot) based birth date. Reported grouping: Less 18 18-24 25-34 35-44 44-59 60 plus","code":""},{"path":"/articles/groups.html","id":"first-generation-student","dir":"Articles","previous_headings":"Demographic Groups","what":"First Generation Student","title":"Groups","text":"first generation student student neither parent guardian received bachelor’s degree. application student asked either parent(s) guardian(s) received bachelor degree, respond student first generation student. respond yes don’t answer student first generation student. sql output TRUE student first generation student.","code":""},{"path":"/articles/groups.html","id":"veteran","dir":"Articles","previous_headings":"Demographic Groups","what":"Veteran","title":"Groups","text":"veteran student served armed forces receiving veteran benefits (includes family members receiving benefits). sql output TRUE student veteran.","code":""},{"path":"/articles/groups.html","id":"student-athlete","dir":"Articles","previous_headings":"Demographic Groups","what":"Student Athlete","title":"Groups","text":"student athlete student EVER official team roster first scheduled contest date NCAA competition. sql output TRUE student athlete.","code":""},{"path":"/articles/groups.html","id":"first-admit-country","dir":"Articles","previous_headings":"Demographic Groups","what":"First Admit Country","title":"Groups","text":"First admit country country listed students first application admitted.","code":""},{"path":"/articles/groups.html","id":"first-admit-state","dir":"Articles","previous_headings":"Demographic Groups","what":"First Admit State","title":"Groups","text":"First admit state state listed students first application admitted. Students US get grouped Foreign State.","code":""},{"path":"/articles/groups.html","id":"first-admit-county","dir":"Articles","previous_headings":"Demographic Groups","what":"First Admit County","title":"Groups","text":"First admit county county listed student first application admitted. Students Utah get grouped state, US; state, US.","code":""},{"path":"/articles/groups.html","id":"act-composite-score","dir":"Articles","previous_headings":"Demographic Groups","what":"ACT Composite Score","title":"Groups","text":"ACT Composite Score student’s highest ACT composite score. Composite score average four ACT test scores (Math, English, Reading, Science), rounded nearest whole number.","code":""},{"path":"/articles/groups.html","id":"sql-for-demographic-groups","dir":"Articles","previous_headings":"Demographic Groups","what":"SQL for Demographic Groups","title":"Groups","text":"","code":"--This query will pull current data from the current term (use student_version to pull snapshot data and version_desc equals 'Census' or 'End of Term') SELECT a.student_id,        a.gender_code,        CASE            WHEN a.gender_code = 'M' THEN 'Male'            WHEN a.gender_code = 'F' THEN 'Female'            ELSE 'Unspecified'            END AS gender_desc,        a.ipeds_race_ethnicity,        CASE           WHEN a.ipeds_race_ethnicity = 'White' THEN 'Non-Minority'           WHEN a.ipeds_race_ethnicity = 'Unspecified' THEN 'Non-Minoirity'           WHEN a.ipeds_race_ethnicity = 'Non-resident Alien' THEN 'Non-Minority'           ELSE 'Minority'        END AS minority,        CASE            WHEN a.is_american_indian_alaskan = 'TRUE' THEN 'BIPOC'            WHEN a.is_asian = 'TRUE' THEN 'BIPOC'            WHEN a.is_black = 'TRUE' THEN 'BIPOC'            WHEN a.is_hawaiian_pacific_islander = 'TRUE' THEN 'BIPOC'            WHEN a.is_hispanic_latino_ethnicity = 'TRUE' THEN 'BIPOC'            WHEN a.is_multi_racial = 'TRUE' THEN 'BIPOC'            ELSE 'non-BIPOC'            END AS BIPOC_student,        a.us_citizenship_code,        a.us_citizenship_desc,        a.is_international,        CASE               WHEN EXTRACT(YEAR from AGE(current_date, a.birth_date)) < 18 THEN 'less than 18'               WHEN EXTRACT(YEAR from AGE(current_date, a.birth_date)) BETWEEN 18 and 24 THEN '18 to 24'               WHEN EXTRACT(YEAR from AGE(current_date, a.birth_date)) BETWEEN 25 and 34 THEN '25 to 34'               WHEN EXTRACT(YEAR from AGE(current_date, a.birth_date)) BETWEEN 35 and 44 THEN '35 to 44'               WHEN EXTRACT(YEAR from AGE(current_date, a.birth_date)) BETWEEN 45 and 59 THEN '45 to 59'               WHEN EXTRACT(YEAR from AGE(current_date, a.birth_date)) > 59 THEN '60 plus'               ELSE 'error'           END AS age_band,        a.is_first_generation,        a.is_athlete,        a.is_veteran,        a.first_admit_country_desc,        a.first_admit_state_desc,        a.first_admit_county_desc,        a.act_composite_score   FROM export.student a --comment out this row and uncomment out the two rows below if you want snapshot data   --FROM export.student_version a   --WHERE a.version_desc = 'Census'"},{"path":"/articles/groups.html","id":"term-based-groups","dir":"Articles","previous_headings":"","what":"Term Based Groups","title":"Groups","text":"Data classification can change semester based information system current term program, student type, etc. data stored student term level, student_term_level table. data changes often. data can pulled Current, End Term Census.","code":""},{"path":"/articles/groups.html","id":"college","dir":"Articles","previous_headings":"Term Based Groups","what":"College","title":"Groups","text":"College id/desc indicates college student belongs based primary program student declared. Programs assigned department departments assigned colleges (abbreviation/desc). eight options: COB - College Business COE - College Education COA - College Arts GCO - College Global Community Outreach COHS - College Health Sciences CHASS - College Humanities Social Sciences CSET - College Science, Engineering Technology UCOL - University College","code":""},{"path":"/articles/groups.html","id":"department","dir":"Articles","previous_headings":"Term Based Groups","what":"Department","title":"Groups","text":"Department id/desc indicates department student belongs based primary program student declared. Programs assigned department departments assigned colleges.","code":""},{"path":"/articles/groups.html","id":"program","dir":"Articles","previous_headings":"Term Based Groups","what":"Program","title":"Groups","text":"Program id/desc students’ declared program study. Programs assigned department departments assigned colleges. program code made degree id, major id applicable concentration id.","code":""},{"path":"/articles/groups.html","id":"concentration","dir":"Articles","previous_headings":"Term Based Groups","what":"Concentration","title":"Groups","text":"Concentration id/desc specific area emphasis specialization major chosen student. majors concentration option.","code":""},{"path":"/articles/groups.html","id":"degree","dir":"Articles","previous_headings":"Term Based Groups","what":"Degree","title":"Groups","text":"Degree id/desc degree tied students’ primary program study.","code":""},{"path":"/articles/groups.html","id":"major","dir":"Articles","previous_headings":"Term Based Groups","what":"Major","title":"Groups","text":"Major id/desc major tied students’ primary program study.","code":""},{"path":"/articles/groups.html","id":"degree-seeking-student","dir":"Articles","previous_headings":"Term Based Groups","what":"Degree Seeking Student","title":"Groups","text":"student degree seeking student students’ primary program leads credential. includes Associate, Bachelor, Master’s students. sql output TRUE student degree seeking student.","code":""},{"path":"/articles/groups.html","id":"student-type","dir":"Articles","previous_headings":"Term Based Groups","what":"Student Type","title":"Groups","text":"Student Type student’s enrollment status registration status term. options : H - High School - student taking classes institution still high school. code given student every term enroll still high school. F - Freshman - student attending institution first time undergraduate level degree seeking program graduation high school. Includes students enrolled fall term attended college first time prior summer term, students entered advanced standing (college credits earned graduation high school (e.g., advanced placement concurrent enrollment)). student coded freshman . C - Continuing Registration - student re-enrolling institution attended previous term. Includes student attends spring term, stops summer term, returns fall term. R - Readmit - student re-enrolled institution stopping least one term (excluding summer term). T - Transfer - student entering reporting institution first time known previously attended post secondary institution level (e.g., undergraduate, graduate). includes new students enrolled fall term transferred institution prior summer term. student may transfer without credit. student coded transfer . P - Personal Interest, Non-Degree - student taking courses without applying candidacy degree certificate. 1 - New Graduate - student holds bachelors first professional degree, equivalent, taking courses post baccalaureate level first time. students may may enrolled graduate programs. student coded new graduate . 2 - Transfer Graduate - student entering reporting institution graduate level first time known previously attended another post secondary institution graduate level. student may transfer without credit. student coded transfer graduate . 3 - Readmit Graduate - student re-enrolled institution stopping least one term graduate coursework (excluding summer term). 5 - Continuing Graduate - graduate student re-enrolling institution attended previous term graduate student.","code":""},{"path":"/articles/groups.html","id":"student-level","dir":"Articles","previous_headings":"Term Based Groups","what":"Student Level","title":"Groups","text":"Student level level primary degree student pursing. options : Undergraduate Graduate.","code":""},{"path":"/articles/groups.html","id":"class-level","dir":"Articles","previous_headings":"Term Based Groups","what":"Class Level","title":"Groups","text":"Class level based student’s overall cumulative earned credit hours. student’s class level year school, based credit hours. can sophomores first semester, well freshmen third year. graduate students reported Graduate. Undergraduate students four options, options : Freshman <30 credit hours Sophomore 30-59 credit hours Junior 60-89 credit hours Senior 90 credit hours","code":""},{"path":"/articles/groups.html","id":"course-load","dir":"Articles","previous_headings":"Term Based Groups","what":"Course Load","title":"Groups","text":"Course load status student’s time commitment based many credit hours attempted student’s level given semester. options : Full-time Undergraduate students, 12 credit hours; Graduate students 9 credit hours Part-time Undergraduate students, less 12 credit hours; Graduate students less 9 credit hours.","code":""},{"path":"/articles/groups.html","id":"tuition-residency","dir":"Articles","previous_headings":"Term Based Groups","what":"Tuition Residency","title":"Groups","text":"Tuition Residency official status student’s residence tuition purposes. options : 0 - Undeclared - American Indian Tribal Resident B - Housebill 102 - 2023 C - Changed Non-Resident G - Good Neighbor Tuition H - Housebill 118/144 Waivers M - Military, --State N - Non-Resident UT R - UT Resident S - Surcharge excessive credits","code":""},{"path":"/articles/groups.html","id":"state-residency","dir":"Articles","previous_headings":"Term Based Groups","what":"State Residency","title":"Groups","text":"State Residency summarizes tuition residency two categories, -state --state. options : -state residency --state residency","code":""},{"path":"/articles/groups.html","id":"high-school-student","dir":"Articles","previous_headings":"Term Based Groups","what":"High School Student","title":"Groups","text":"High School Student student taking course Utah Tech University still attending high school. High school subset Non-degree-seeking. sql output TRUE student high school student.","code":""},{"path":"/articles/groups.html","id":"non-matriculated","dir":"Articles","previous_headings":"Term Based Groups","what":"Non-Matriculated","title":"Groups","text":"non-matriculated student non-degree-seeking student enrolled per sue personal interests, credential. Non-matriculated subset Non-degree-seeking. sql output TRUE student non-matriculated student.","code":""},{"path":"/articles/groups.html","id":"online-program-student","dir":"Articles","previous_headings":"Term Based Groups","what":"Online Program Student","title":"Groups","text":"Online Program Student student paying online tuition online program (program can completed online). sql output TRUE student online program student.","code":""},{"path":"/articles/groups.html","id":"overall-cumulative-gpa-band","dir":"Articles","previous_headings":"Term Based Groups","what":"Overall Cumulative GPA Band","title":"Groups","text":"Overall Cumulative GPA Band displays student’s Overall (institutional transfer) Cumulative (across semesters) GPA. Best used End Term. Reported grouping: new (null - GPA yet) 0-1.999 2-2.49 2.5-2.999 3-4.0","code":""},{"path":"/articles/groups.html","id":"institutional-term-gpa-band","dir":"Articles","previous_headings":"Term Based Groups","what":"Institutional Term GPA Band","title":"Groups","text":"Institutional Term GPA Band displays student’s Institutional Term GPA. Best used End Term. Reported grouping: 0-1.999 2-2.49 2.5-2.999 3-4.0 missing (end term record year long High School course enrolled end term)","code":""},{"path":"/articles/groups.html","id":"pell-eligible","dir":"Articles","previous_headings":"Term Based Groups","what":"Pell Eligible","title":"Groups","text":"Pell Eligible student student eligible receive Pell grant term based FAFSA. sql output TRUE student Pell eligible.","code":""},{"path":"/articles/groups.html","id":"pell-awarded","dir":"Articles","previous_headings":"Term Based Groups","what":"Pell Awarded","title":"Groups","text":"Pell Awarded student student awarded Pell grant term. sql output TRUE student Pell Awarded.","code":""},{"path":"/articles/groups.html","id":"subsidized-loan-awarded","dir":"Articles","previous_headings":"Term Based Groups","what":"Subsidized Loan Awarded","title":"Groups","text":"Subsidized Loan Awarded student student awarded Subsidized Loan term. sql output TRUE student Subsidized Loan Awarded.","code":""},{"path":"/articles/groups.html","id":"student-athlete-term","dir":"Articles","previous_headings":"Term Based Groups","what":"Student Athlete Term","title":"Groups","text":"Student Athlete student official team roster first scheduled contest date NCAA competition semester. sql output TRUE student athlete.","code":""},{"path":"/articles/groups.html","id":"sql-for-term-based-groups","dir":"Articles","previous_headings":"Term Based Groups","what":"SQL for Term Based Groups","title":"Groups","text":"","code":"--This query will pull current data from the current term (use student_term_level_version to pull snapshot data and version_desc equals 'Census' or 'End of Term') SELECT a.student_id,        b.college_abbrv,        b.college_desc,        b.department_id,        b.department_desc,        a.primary_program_id AS program_id,        a.primary_program_desc AS program_desc,        a.primary_concentration_id AS concentration_id,        a.primary_concentration_desc AS concentration_desc,        a.primary_degree_id AS degree_id,        a.primary_degree_desc AS degree_desc,        b.major_id,        b.major_desc,        a.is_degree_seeking,        a.student_type_code,        a.student_type_desc,        CASE            WHEN a.student_type_code = 'H' THEN TRUE            ELSE FALSE         END AS is_high_school,        a.level_id AS student_level_id,        a.level_desc AS student_level_desc,        a.primary_level_class_id AS class_level_id,        a.primary_level_class_desc AS class_level_desc,        a.full_time_part_time_code AS course_load,        a.residency_code AS tuition_residency_code,         a.residency_code_desc AS tuition_residency_desc,        a.residency_in_state_code AS state_residency_code,        a.residency_in_state_desc AS state_residency_desc,        CASE            WHEN a.student_type_code = 'H' THEN TRUE            ELSE FALSE         END AS is_high_school,        CASE            WHEN a.student_type_code = 'P' THEN TRUE            ELSE FALSE         END AS is_non_matriculated,        a.is_online_program_student,        CASE            WHEN a.overall_cumulative_gpa < 2.0 THEN '0_to_1.999'            WHEN a.overall_cumulative_gpa BETWEEN 2.0 AND 2.499 THEN '2_to_2.499'            WHEN a.overall_cumulative_gpa BETWEEN 2.5 AND 2.999 THEN '2.5_to_2.999'            WHEN a.overall_cumulative_gpa BETWEEN 3.0 AND 4 THEN '3_to_4'            ELSE 'new'        END AS overall_cumulative_gpa_band,         CASE            WHEN a.institutional_term_gpa < 2.0 THEN '0_to_1.999'            WHEN a.institutional_term_gpa BETWEEN 2.0 AND 2.499 THEN '2_to_2.499'            WHEN a.institutional_term_gpa BETWEEN 2.5 AND 2.999 THEN '2.5_to_2.999'            WHEN a.institutional_term_gpa BETWEEN 3.0 AND 4 THEN '3_to_4'            ELSE 'new'         END AS institutional_term_gpa,        a.is_pell_eligible,        a.is_pell_awarded,        a.is_pell_awarded,        a.is_subsidized_loan_awarded,        a.is_athlete AS student_athlete_term   FROM export.student_term_level a --comment out this line and then uncomment the line below and the version_desc line if you want snapshot data   --FROM export.student_term_level_version a   LEFT JOIN export.academic_programs b ON b.program_id = a.primary_program_id  WHERE a.is_enrolled IS TRUE    AND a.is_primary_level IS TRUE    AND a.is_current_term IS TRUE    --AND a.version_desc = 'Census';"},{"path":"/articles/groups.html","id":"course-based-groups","dir":"Articles","previous_headings":"","what":"Course Based Groups","title":"Groups","text":"Data classification can change day different semester. based courses student enrolled . data stored student term section level, student_term_section table. data changes often. data can pulled Current, End Term Census.","code":""},{"path":"/articles/groups.html","id":"high-school-concurrent-enrollment-student","dir":"Articles","previous_headings":"Course Based Groups","what":"High School Concurrent Enrollment Student","title":"Groups","text":"High School Concurrent Enrollment student high school student enrolled least one funded concurrent enrollment class. High School Concurrent Enrollment students subset High School Students. high school student isn’t concurrent enrollment student student High School Student, . sql output TRUE student high school concurrent enrollment student.","code":""},{"path":"/articles/groups.html","id":"sql-for-high-school-concurrent-enrollment-student","dir":"Articles","previous_headings":"Course Based Groups","what":"SQL for High School Concurrent Enrollment Student","title":"Groups","text":"","code":"--This query will pull current data from the current term (use student_term_level_version to pull snapshot data) WITH cte AS            (                SELECT a.budget_code,                       b.student_type_code,                       a.student_id,                       a.course_id,                       a.term_id                  FROM export.student_section a                           LEFT JOIN export.student_term_level b                                     ON b.student_id = a.student_id                                         AND b.term_id = a.term_id                                         AND b.is_primary_level IS TRUE                 WHERE a.is_enrolled IS TRUE                   AND a.is_current_term IS TRUE                 ORDER BY a.student_id            ),        concurrent_cte AS ( --this query flags student courses that are eligible for concurrent enrollment funds            SELECT a.student_id,                   a.term_id,                   CASE                       WHEN a.student_type_code = 'H' AND (a.budget_code IN ('BC', 'SF'))                           THEN TRUE                       ELSE FALSE                       END AS cte_concurrent_enrollment              FROM cte a        ) SELECT a.student_id,        a.term_id,        bool_or(cte_concurrent_enrollment) AS is_concurrent_enrollment   FROM concurrent_cte a  GROUP BY a.student_id, a.term_id"},{"path":"/articles/groups.html","id":"distance-education-status","dir":"Articles","previous_headings":"Course Based Groups","what":"Distance Education Status","title":"Groups","text":"Distance Education Status determines students’ courses Distance Education , Distance Education , Distance Education None. distance education course uses one types technology deliver instruction students separated instructor support regular substantive interaction students instructor synchronously asynchronously.","code":""},{"path":"/articles/groups.html","id":"sql-for-distance-education-status","dir":"Articles","previous_headings":"Course Based Groups","what":"SQL for Distance Education Status","title":"Groups","text":"","code":"--This query will pull current data from the current term (use student_term_level_version to pull snapshot data) SELECT a.student_id,        a.is_distance_ed_all,        a.is_distance_ed_some,        a.is_distance_ed_none   FROM export.student_term_level a  WHERE a.is_enrolled IS TRUE    AND a.is_primary_level IS TRUE    AND a.is_current_term IS TRUE"},{"path":"/articles/groups.html","id":"online-status","dir":"Articles","previous_headings":"Course Based Groups","what":"Online Status","title":"Groups","text":"Online Status determines students courses Online , Online , Online None. online course subset distance education courses. Online courses primarily delivered asynchronously; students work pace within timelines established instructor.","code":""},{"path":"/articles/groups.html","id":"sql-for-online-status","dir":"Articles","previous_headings":"Course Based Groups","what":"SQL for Online Status","title":"Groups","text":"","code":"--This query will pull current data from the current term (use student_section_version to pull snapshot data) SELECT student_id,        instruction_method_code_aggregated,        instruction_method_code_aggregated !~ '[I]'  AS online_none,        instruction_method_code_aggregated !~ '[^I]' AS online_all,        CASE            WHEN instruction_method_code_aggregated !~ '[^I]' THEN FALSE            WHEN instruction_method_code_aggregated ~ '[I]+' THEN TRUE            ELSE FALSE            END                                      AS online_some,        academic_year_code FROM (SELECT a.student_id,              STRING_AGG(instruction_method_code :: VARCHAR, ''                         ORDER BY instruction_method_code) AS instruction_method_code_aggregated,              b.academic_year_code       FROM export.student_section a                LEFT JOIN export.term b ON b.term_id = a.term_id       WHERE is_enrolled         AND season != 'Summer'       GROUP BY a.student_id,                b.academic_year_code) x"},{"path":"/articles/groups.html","id":"student-category","dir":"Articles","previous_headings":"Course Based Groups","what":"Student Category","title":"Groups","text":"student’s category based degree seeking status. options : Degree Seeking Non-Matriculated High School Concurrent Enrollment Students High School Students, ","code":""},{"path":"/articles/groups.html","id":"sql-for-student-category","dir":"Articles","previous_headings":"Course Based Groups","what":"SQL for Student Category","title":"Groups","text":"","code":"--This query will pull current data from the current term (use student_term_level_version and student_section_version to pull snapshot data) WITH cte_degree_seeking AS          (SELECT a.student_id,                  a.term_id,                  a.is_degree_seeking           FROM export.student_term_level a           WHERE a.is_enrolled IS TRUE             AND a.is_primary_level IS TRUE             AND a.is_current_term IS TRUE           ORDER BY a.student_id),      cte_non_matriculated AS          (SELECT a.student_id,                  a.term_id,                  CASE                      WHEN a.student_type_code = 'P' THEN 'TRUE'                      ELSE 'FALSE'                      END AS is_non_matriculated           FROM export.student_term_level a           WHERE a.is_enrolled IS TRUE             AND a.is_primary_level IS TRUE             AND a.is_current_term IS TRUE           ORDER BY a.student_id),      cte_high_school AS          (SELECT a.student_id,                  a.term_id,                  CASE                      WHEN a.student_type_code = 'H' THEN 'TRUE'                      ELSE 'FALSE'                      END AS is_high_school           FROM export.student_term_level a           WHERE a.is_enrolled IS TRUE             AND a.is_primary_level IS TRUE             AND a.is_current_term IS TRUE           ORDER BY a.student_id),      cte_concurrent AS          (WITH cte AS                    (SELECT a.budget_code,                            b.student_type_code,                            a.student_id,                            a.course_id,                            a.term_id                     FROM export.student_section a                              LEFT JOIN export.student_term_level b                                        ON b.student_id = a.student_id                                            AND b.term_id = a.term_id                                            AND b.is_primary_level IS TRUE                     WHERE a.is_enrolled IS TRUE                       AND a.is_current_term IS TRUE                     ORDER BY a.student_id),                concurrent_cte AS ( --this query flags student courses that are eligible for concurrent enrollment funds                    SELECT a.student_id,                           a.term_id,                           CASE                               WHEN a.student_type_code = 'H' AND (a.budget_code IN ('BC', 'SF'))                                   THEN TRUE                               ELSE FALSE                               END AS cte_concurrent_enrollment                    FROM cte a)           SELECT a.student_id,                  a.term_id,                  bool_or(cte_concurrent_enrollment) AS is_concurrent_enrollment           FROM concurrent_cte a           GROUP BY a.student_id, a.term_id) SELECT a.student_id,        a.term_id,        b.is_degree_seeking,        c.is_non_matriculated,        d.is_high_school,        e.is_concurrent_enrollment,        CASE WHEN b.is_degree_seeking = 'TRUE' THEN 'degree-seeking'             WHEN c.is_non_matriculated = 'TRUE' THEN 'non-matriculated'             WHEN d.is_high_school = 'TRUE' AND e.is_concurrent_enrollment = 'TRUE' THEN 'high_school_concurrent'             WHEN d.is_high_school = 'TRUE' AND e.is_concurrent_enrollment = 'FALSE' THEN 'high_school_other'             ELSE 'error'             END AS student_categories FROM export.student_term_level a          LEFT JOIN cte_degree_seeking b                    ON b.student_id = a.student_id AND b.term_id = a.term_id          LEFT JOIN cte_non_matriculated c                    ON c.student_id = a.student_id AND c.term_id = a.term_id          LEFT JOIN cte_high_school d                    ON d.student_id = a.student_id AND d.term_id = a.term_id          LEFT JOIN cte_concurrent e                    ON e.student_id = a.student_id AND e.term_id = a.term_id WHERE a.is_enrolled IS TRUE   AND a.is_primary_level IS TRUE   AND a.is_current_term IS TRUE"},{"path":"/articles/headcount.html","id":"point-in-time-headcount","dir":"Articles","previous_headings":"","what":"Point In Time Headcount","title":"Headcount","text":"Point Time Headcount offers daily glimpse enrollment, detailing term, date, week number, days term start, day’s total enrollment headcount.","code":"SELECT term_id,        date,        date_part('week', date) - 11 AS week,        days_to_class_start,        COUNT(DISTINCT student_id) AS headcount FROM export.daily_enrollment WHERE is_current_term IS TRUE -- Only pulling current term   AND is_enrolled IS TRUE GROUP BY term_id, date, days_to_class_start ORDER BY date DESC;"},{"path":"/articles/headcount.html","id":"current-headcount","dir":"Articles","previous_headings":"","what":"Current Headcount","title":"Headcount","text":"Current Headcount reflects live count enrolled students term, can fluctuate daily may adjusted post-semester changes like withdrawals.","code":"SELECT a.term_desc,        COUNT(a.student_id) AS current_headcount FROM export.student_term_level_version a          LEFT JOIN export.term b                    ON a.term_id = b.term_id WHERE a.is_enrolled IS TRUE   AND a.is_primary_level IS TRUE   AND a.version_desc = 'Current'   AND DATE_PART('year', NOW()) - b.academic_year_code :: INT <= 5 -- Current year plus last 5 years GROUP BY a.term_desc ORDER BY a.term_desc;"},{"path":"/articles/headcount.html","id":"census-headcount","dir":"Articles","previous_headings":"","what":"Census Headcount","title":"Headcount","text":"Census Headcount fixed count students enrolled 15th day term, used static reporting.","code":"... AND a.version_desc = 'Census' --Version description of snapshot status. ..."},{"path":"/articles/headcount.html","id":"end-of-term-headcount","dir":"Articles","previous_headings":"","what":"End of Term Headcount","title":"Headcount","text":"End Term Headcount tallies students enrolled semester’s end, including high school concurrent enrollments, providing another static figure reporting.","code":"... AND a.version_desc = 'End of Term' --Version description of snapshot status. ..."},{"path":"/articles/headcount.html","id":"ipeds-fall-enrollment-headcount","dir":"Articles","previous_headings":"","what":"IPEDS Fall Enrollment Headcount","title":"Headcount","text":"annual reporting, IPEDS Fall Enrollment Headcount uses Fall census data, IPEDS 12 Month Enrollment Headcount gathers year-round credit enrollment figures.","code":"... AND a.version_desc = 'Census' --Version description of snapshot status. ..."},{"path":"/articles/headcount.html","id":"ipeds-12-month-enrollment-headcount","dir":"Articles","previous_headings":"","what":"IPEDS 12 Month Enrollment Headcount","title":"Headcount","text":"IPEDS 12 Month Enrollment Headcount aims collect comprehensive enrollment data 12-month period. includes unduplicated census counts students enrolled credit, capturing full scope instructional activity throughout year.","code":"SELECT b.academic_year_code,        COUNT(DISTINCT a.student_id) --unduplicated students over the course of an academic year FROM export.student_term_level_version a          LEFT JOIN export.term b                    ON a.term_id = b.term_id WHERE a.is_enrolled = TRUE   AND a.is_primary_level = TRUE   AND a.version_desc = 'Census'   AND DATE_PART('year', NOW()) - b.academic_year_code :: INT = 1 -- Last academic year   AND b.season != 'Summer'                                       -- remove summer as per ipeds requirement GROUP BY academic_year_code;"},{"path":"/articles/headcount.html","id":"ushe-headcount","dir":"Articles","previous_headings":"","what":"USHE Headcount","title":"Headcount","text":"USHE Headcount provides comprehensive view enrollment reporting unduplicated net headcount five times fiscal year: Summer End Term: Captures enrollment conclusion summer term. Fall Census: Records enrollment 15th day fall term. Fall End Term: Tallies enrollment end fall semester. Spring Census: Documents enrollment 15th day spring term. Spring End Term: Counts enrollment close spring semester. Census: USHE Census Headcount net unduplicated number students enrolled 15th day instruction academic term. Census headcount based snapshot data, headcount returns static headcount may modified meet USHE reporting element criteria. End Term: USHE End Term Headcount net unduplicated number students enrolled end semester high school concurrent enrollment grades entered. Based snapshot data, headcount returns static headcount may modified meet USHE reporting element criteria.","code":"... AND a.version_desc = 'Census' --Version description of snapshot status. ... ... AND a.version_desc = 'End of Term' --Version description of snapshot status. ..."},{"path":"/articles/naming_metrics.html","id":"metric-names","dir":"Articles","previous_headings":"","what":"Metric Names","title":"Naming Metrics - utMetrics","text":"Metric names designed give clear understanding metric. Metric names derived components Metric. Season (applicable) Computation Partition(s) (one partition hyphenated) :: Segment(s) (one segment hyphenated)","code":""},{"path":"/articles/naming_metrics.html","id":"example-1-fall-census-headcount-by-student-typetransfer","dir":"Articles","previous_headings":"Metric Names","what":"Example 1: Fall Census Headcount by Student Type::Transfer","title":"Naming Metrics - utMetrics","text":"Fall Season Census Headcount Computation Student Type Partition :: notes segment Transfer Segment Metric show Fall Census Headcount Transfer (student type) students last 5 years.","code":""},{"path":"/articles/naming_metrics.html","id":"example-2-fall-to-fall-comeback-rate-by-college-minoritychass-minority","dir":"Articles","previous_headings":"Metric Names","what":"Example 2: Fall to Fall Comeback Rate by College-Minority::CHASS-Minority","title":"Naming Metrics - utMetrics","text":"Season - applicable Fall Fall Comeback Rate Computation College-Minority - College, Minority Partitions (hyphenated) :: notes segment CHASS-Minority - CHASS college Segment minority Minority Segment (two segments hyphenated, .e., CHASS-Minority). Metric show Fall Fall Comeback Rate CHASS (college) Minority (minority) students.","code":""},{"path":[]},{"path":"/articles/naming_metrics.html","id":"list-of-computations","dir":"Articles","previous_headings":"Metric Names","what":"List of Computations","title":"Naming Metrics - utMetrics","text":"List Computations","code":""},{"path":"/articles/naming_metrics.html","id":"list-of-computations-and-partitions","dir":"Articles","previous_headings":"Metric Names","what":"List of Computations and Partitions","title":"Naming Metrics - utMetrics","text":"List Computations Partitions","code":""},{"path":"/articles/naming_metrics.html","id":"list-of-metrics","dir":"Articles","previous_headings":"Metric Names","what":"List of Metrics","title":"Naming Metrics - utMetrics","text":"List Computations, Partitions, Segments","code":""},{"path":"/articles/retention.html","id":"cohort-retention","dir":"Articles","previous_headings":"","what":"Cohort Retention","title":"Retention","text":"cohort refers group students share common characteristics tracked reporting purposes. context University enrollment, cohorts play significant role understanding student demographics. new degree-seeking students join University, assigned specific cohort. assignment based data extracted census enrollment snapshot. snapshot captures information student demographics, enrollment status, relevant factors. eight distinct cohorts students categorized based enrollment status, degree pursuit entry type: Full-time, Bachelors degree seeking, freshman Full-time, Bachelors degree seeking, transfer Part-time, Bachelors degree seeking, freshman Part-time, Bachelors degree seeking, transfer Full-time, Associates degree seeking, freshman Full-time, Associates degree seeking, transfer Part-time, Associates degree seeking, freshman Part-time, Associates degree seeking, transfer Cohort retention metrics track progress student cohorts advance toward graduation. formula calculating cohort retention rate follows: Denominator: total number students cohort without exclusion flag. Numerator: number students denominator enrolled census date return term. \\[ \\text{Retention Rate} = \\frac{\\text{Number Retained Students}}{\\text{Total Number Non-Excluded Students}} \\]","code":"SELECT a.student_id,            a.cohort_start_term_id,            a.is_exclusion,            -- Second fall return rate            a.is_returned_next_fall,            a.is_graduated_year_1,            -- Third fall return rate            a.is_returned_fall_3,            a.is_degree_completer_2,            -- Fourth fall return rate            a.is_returned_fall_4,            a.is_degree_completer_3,            c.primary_major_desc,            c.primary_degree_id,            c.primary_degree_desc,            d.college_abbrv,            d.college_desc,            e.first_name,            e.last_name,            e.gender_code,            e.ipeds_race_ethnicity,            e.is_veteran,            e.is_international,            e.is_athlete,            e.is_first_generation      FROM export.student_term_cohort a LEFT JOIN export.term b        ON b.term_id = a.cohort_start_term_id LEFT JOIN export.student_term_level_version c        ON c.student_id = a.student_id       AND c.term_id = a.cohort_start_term_id       AND c.is_enrolled       AND c.is_primary_level       AND c.is_census_version LEFT JOIN export.academic_programs d        ON d.program_id = c.primary_program_id LEFT JOIN export.student e        ON e.student_id = a.student_id     WHERE b.season = 'Fall'       AND a.cohort_desc != 'Student Success'       AND substr(a.cohort_start_term_id, 1, 4)::int >= (SELECT substr(term_id, 1, 4)::int - 5                                      FROM export.term                                      WHERE is_current_term)"},{"path":"/articles/retention.html","id":"term-to-term-retention","dir":"Articles","previous_headings":"","what":"Term to Term Retention","title":"Retention","text":"Term--term metrics include: Comeback rate fall spring Comeback rate fall fall Return rate fall spring Return rate fall fall Comeback rate metrics track degree seeking students enrolled (retained) census return term indicated; exclusions removed metric. denominator metric number degree seeking students exclusion flag. denominator metric number students numerator enrolled census return term indicated. Return rate metrics track degree seeking students enrolled (retained) census completed credential return term indicated; exclusions removed metric. denominator metric number degree seeking students exclusion flag. numerator metric number students denominator enrolled census completed credential return term indicated.","code":"SELECT a.student_id,           a.term_id,           a.is_returned_next_spring,           a.is_returned_next_fall,           c.primary_major_desc,           c.primary_degree_id,           c.primary_degree_desc,           d.college_abbrv,           d.college_desc,           e.first_name,           e.last_name,           e.gender_code,           e.ipeds_race_ethnicity,           e.is_veteran,           e.is_international,           e.is_athlete,           e.is_first_generation,           COALESCE(f.is_exclusion, FALSE) AS is_exclusion,           COALESCE(f.cohort_start_term_id, 'None') AS cohort_start_term_id,           COALESCE(f.cohort_desc, 'None') AS cohort_type      FROM export.student_term_outcome a LEFT JOIN export.term b        ON b.term_id = a.term_id LEFT JOIN export.student_term_level_version c        ON c.student_id = a.student_id       AND c.term_id = a.term_id       AND c.is_enrolled       AND c.is_primary_level       AND c.is_census_version LEFT JOIN export.academic_programs d        ON d.program_id = c.primary_program_id LEFT JOIN export.student e        ON e.student_id = a.student_id LEFT JOIN export.student_term_cohort f        ON f.student_id = a.student_id       AND f.cohort_desc IN ('First-Time Freshman', 'Transfer')     WHERE b.season = 'Fall'       AND substr(a.term_id, 1, 4)::int >= (SELECT substr(term_id, 1, 4)::int - 5                                      FROM export.term                                      WHERE is_current_term)"},{"path":"/articles/utMetrics.html","id":"metric-names","dir":"Articles","previous_headings":"","what":"Metric Names","title":"utMetrics","text":"Metric names designed give clear understanding metric. Metric names derived components Metric. Season (applicable) Computation Partition(s) :: Segment(s) (applicable) see information metric names, see Naming Metrics Vignette","code":""},{"path":"/articles/utMetrics.html","id":"season-and-year-term","dir":"Articles","previous_headings":"Metric Names","what":"Season and Year (Term)","title":"utMetrics","text":"Metrics calculated season (Fall, Spring, Summer) Year. Season Year together referred Term. term code (202440) term Fall 2024. Season may also tied computation. Sometimes season, integrated computation name (.e. Fall Fall Comeback Rate), also season Fall. see information year, see Computations - utMetrics Vignette","code":""},{"path":"/articles/utMetrics.html","id":"computation","dir":"Articles","previous_headings":"Metric Names","what":"Computation","title":"utMetrics","text":"Metrics organized computations. Computation way metric computed calculated. several computations utMetrics package: Census Headcount End Term Headcount Fall Fall Cohort Retention Returned 3rd Fall Cohort Retention Returned 4th Fall Cohort Retention Fall Spring Comeback Rate Fall Fall Comeback Rate Fall Spring Return Rate Fall Fall Return Rate 150% Graduation Rate Census FTE End Term FTE see information computations, see Computations Vignette","code":""},{"path":"/articles/utMetrics.html","id":"partition","dir":"Articles","previous_headings":"Metric Names","what":"Partition","title":"utMetrics","text":"metric can displayed partitions segments. Partitions way parse break metric. literature, often referred disaggregating data. one partition can used metric. 30 partitions. common examples: Students Degree Seeking Students Gender College Department Cohort Race Ethnicity Minority Student Type Course Load Course Level Partitions can also combined. metrics displayed one partition, allows metric displayed one category. examples: Student Type, Course Load College, Gender Cohort, Entering College Online Program, College metric one partition, displayed naming hyphen. examples using examples : Student Type-Course Load College-Gender Cohort-Entering College Online Program-College","code":""},{"path":"/articles/utMetrics.html","id":"segments","dir":"Articles","previous_headings":"Metric Names","what":"Segments","title":"utMetrics","text":"partition creates segments. Segments values partition produces. values typically unique partition. example, partition Gender create segments Male Female. partitions combined described , segments also combined. one segment present, data separated hyphen (.e. Gender College partitions produce segments look like : Male-CHASS).","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matt Nickodemus. Author, maintainer. Joy Baule. Author. Justin Pfeifer. Author. Andrea Bringhurst. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nickodemus M, Baule J, Pfeifer J, Bringhurst (2024). utDataStoR: SQL data sets Office Institutional Effectiveness. https://github.com/ut-effectiveness/utDataStoR, https://ut-effectiveness.github.io/utDataStoR/.","code":"@Manual{,   title = {utDataStoR: SQL and data sets for the Office of Institutional Effectiveness},   author = {Matt Nickodemus and Joy Baule and Justin Pfeifer and Andrea Bringhurst},   year = {2024},   note = {https://github.com/ut-effectiveness/utDataStoR, https://ut-effectiveness.github.io/utDataStoR/}, }"},{"path":"/index.html","id":"utdatastor-","dir":"","previous_headings":"","what":"SQL and data sets for the Office of Institutional Effectiveness","title":"SQL and data sets for the Office of Institutional Effectiveness","text":"goal utDataStoR centralize document standard SQL queries data sets used analysts Utah Tech University.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"SQL and data sets for the Office of Institutional Effectiveness","text":"can install development version utDataStoR GitHub :","code":"install.packages(\"devtools\") devtools::install_github(\"ut-effectiveness/utDataStoR\", build_vignettes = TRUE)"},{"path":"/reference/create_sql_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Helper Functions — create_sql_dir","title":"Generate Helper Functions — create_sql_dir","text":"create_sql_dir generate path used house sql files based context parameter.","code":""},{"path":"/reference/create_sql_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Helper Functions — create_sql_dir","text":"","code":"create_sql_dir(context)"},{"path":"/reference/create_sql_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Helper Functions — create_sql_dir","text":"context context project.  \"project\", \"shiny\", \"sandbox\"","code":""},{"path":"/reference/display_sql_with_comments.html","id":null,"dir":"Reference","previous_headings":"","what":"Display sql with comments — display_sql_with_comments","title":"Display sql with comments — display_sql_with_comments","text":"Display sql comments","code":""},{"path":"/reference/display_sql_with_comments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display sql with comments — display_sql_with_comments","text":"","code":"display_sql_with_comments(folder, file)"},{"path":"/reference/display_sql_with_comments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display sql with comments — display_sql_with_comments","text":"folder name folder inst containing sql file. file name sql file want display.","code":""},{"path":"/reference/display_sql_with_comments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display sql with comments — display_sql_with_comments","text":"sql file SQL folder","code":""},{"path":"/reference/make_headcount_sql.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate headcount Sql — make_headcount_sql","title":"Generate headcount Sql — make_headcount_sql","text":"make_headcount_sql generate standard sql query pulling headcount data Edify. function often used function utHelpR::uth_make_outcome_count produce pivot tables headcount numbers. several types headcounts choose . specify type headcount like, use type parameter. questions version use report, please contact Joy Lindsay. details see headcount vignette. can bring running following code console. vignette(\"headcount\", package = \"utDataStoR\")","code":""},{"path":"/reference/make_headcount_sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate headcount Sql — make_headcount_sql","text":"","code":"make_headcount_sql(name, type = \"current\")"},{"path":"/reference/make_headcount_sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate headcount Sql — make_headcount_sql","text":"name name want SQL file sql folder. type type headcount file want. Defaults 'current' headcount data. options 'census' -- data census snapshot 'census_demographic' -- headcount data demographic data, census snapshot 'eot' -- data end term snapshot 'ipeds' -- data reported IPEDS 'pit' -- point time data","code":""},{"path":"/reference/make_headcount_sql.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate headcount Sql — make_headcount_sql","text":"sql file SQL folder","code":""},{"path":"/reference/make_retention_sql.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Retention Sql — make_retention_sql","title":"Generate Retention Sql — make_retention_sql","text":"make_retention_sql generate standard sql query pulling retention data Edify","code":""},{"path":"/reference/make_retention_sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Retention Sql — make_retention_sql","text":"","code":"make_retention_sql(name, type = \"term_to_term\")"},{"path":"/reference/make_retention_sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Retention Sql — make_retention_sql","text":"name name want SQL file sql folder. type type retention file want. Defaults 'term_to_term'. type parameter term_to_term cohort","code":""},{"path":"/reference/make_retention_sql.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Retention Sql — make_retention_sql","text":"sql file SQL folder","code":""},{"path":"/reference/sql_fte.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate FTE SQL — sql_fte","title":"Generate FTE SQL — sql_fte","text":"sql_fte generate standard sql query pulling FTE Edify, REPT DSCIR.","code":""},{"path":"/reference/sql_fte.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate FTE SQL — sql_fte","text":"","code":"sql_fte(data_source = \"Edify\", name)"},{"path":"/reference/sql_fte.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate FTE SQL — sql_fte","text":"data_source server full . Edify, REPT, DSCIR name name want SQL file sql folder.","code":""},{"path":"/reference/sql_fte.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate FTE SQL — sql_fte","text":"sql file SQL folder","code":""},{"path":"/reference/sql_validate_buildings.html","id":null,"dir":"Reference","previous_headings":"","what":"sql_validate_buildings will generate the standard sql query for pulling Building Validations from Edify.\nValidations are done through Edify. — sql_validate_buildings","title":"sql_validate_buildings will generate the standard sql query for pulling Building Validations from Edify.\nValidations are done through Edify. — sql_validate_buildings","text":"sql_validate_buildings generate standard sql query pulling Building Validations Edify. Validations done Edify.","code":""},{"path":"/reference/sql_validate_buildings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sql_validate_buildings will generate the standard sql query for pulling Building Validations from Edify.\nValidations are done through Edify. — sql_validate_buildings","text":"","code":"sql_validate_buildings(data_source, name, context)"},{"path":"/reference/sql_validate_buildings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sql_validate_buildings will generate the standard sql query for pulling Building Validations from Edify.\nValidations are done through Edify. — sql_validate_buildings","text":"data_source server full . Edify name name want SQL file sql folder. context context project.  \"project\", \"shiny\", \"sandbox\"","code":""},{"path":"/reference/sql_validate_buildings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sql_validate_buildings will generate the standard sql query for pulling Building Validations from Edify.\nValidations are done through Edify. — sql_validate_buildings","text":"sql file SQL folder","code":""},{"path":"/reference/sql_validate_courses.html","id":null,"dir":"Reference","previous_headings":"","what":"sql_validate_courses will generate the standard sql query for pulling Course Validations from Edify.\nValidations are done through Edify. — sql_validate_courses","title":"sql_validate_courses will generate the standard sql query for pulling Course Validations from Edify.\nValidations are done through Edify. — sql_validate_courses","text":"sql_validate_courses generate standard sql query pulling Course Validations Edify. Validations done Edify.","code":""},{"path":"/reference/sql_validate_courses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sql_validate_courses will generate the standard sql query for pulling Course Validations from Edify.\nValidations are done through Edify. — sql_validate_courses","text":"","code":"sql_validate_courses(data_source, name, context)"},{"path":"/reference/sql_validate_courses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sql_validate_courses will generate the standard sql query for pulling Course Validations from Edify.\nValidations are done through Edify. — sql_validate_courses","text":"data_source server full . Edify name name want SQL file sql folder. context context project.  \"project\", \"shiny\", \"sandbox\"","code":""},{"path":"/reference/sql_validate_courses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sql_validate_courses will generate the standard sql query for pulling Course Validations from Edify.\nValidations are done through Edify. — sql_validate_courses","text":"sql file SQL folder","code":""},{"path":"/reference/sql_validate_graduation.html","id":null,"dir":"Reference","previous_headings":"","what":"sql_validate_graduation will generate the standard sql query for pulling Graduation Validations from Edify.\nValidations are done through Edify. — sql_validate_graduation","title":"sql_validate_graduation will generate the standard sql query for pulling Graduation Validations from Edify.\nValidations are done through Edify. — sql_validate_graduation","text":"sql_validate_graduation generate standard sql query pulling Graduation Validations Edify. Validations done Edify.","code":""},{"path":"/reference/sql_validate_graduation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sql_validate_graduation will generate the standard sql query for pulling Graduation Validations from Edify.\nValidations are done through Edify. — sql_validate_graduation","text":"","code":"sql_validate_graduation(data_source, name, context)"},{"path":"/reference/sql_validate_graduation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sql_validate_graduation will generate the standard sql query for pulling Graduation Validations from Edify.\nValidations are done through Edify. — sql_validate_graduation","text":"data_source server full . Edify name name want SQL file sql folder. context context project.  \"project\", \"shiny\", \"sandbox\"","code":""},{"path":"/reference/sql_validate_graduation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sql_validate_graduation will generate the standard sql query for pulling Graduation Validations from Edify.\nValidations are done through Edify. — sql_validate_graduation","text":"sql file SQL folder","code":""},{"path":"/reference/sql_validate_rooms.html","id":null,"dir":"Reference","previous_headings":"","what":"sql_validate_rooms will generate the standard sql query for pulling Rooms Validations from Edify.\nValidations are done through Edify. — sql_validate_rooms","title":"sql_validate_rooms will generate the standard sql query for pulling Rooms Validations from Edify.\nValidations are done through Edify. — sql_validate_rooms","text":"sql_validate_rooms generate standard sql query pulling Rooms Validations Edify. Validations done Edify.","code":""},{"path":"/reference/sql_validate_rooms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sql_validate_rooms will generate the standard sql query for pulling Rooms Validations from Edify.\nValidations are done through Edify. — sql_validate_rooms","text":"","code":"sql_validate_rooms(data_source, name, context)"},{"path":"/reference/sql_validate_rooms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sql_validate_rooms will generate the standard sql query for pulling Rooms Validations from Edify.\nValidations are done through Edify. — sql_validate_rooms","text":"data_source server full . Edify name name want SQL file sql folder. context context project.  \"project\", \"shiny\", \"sandbox\"","code":""},{"path":"/reference/sql_validate_rooms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sql_validate_rooms will generate the standard sql query for pulling Rooms Validations from Edify.\nValidations are done through Edify. — sql_validate_rooms","text":"sql file SQL folder","code":""},{"path":"/reference/sql_validate_student.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Validation SQL — sql_validate_student","title":"Generate Validation SQL — sql_validate_student","text":"sql_validate_student generate standard sql query pulling Student Validations Edify. Validations done Edify.","code":""},{"path":"/reference/sql_validate_student.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Validation SQL — sql_validate_student","text":"","code":"sql_validate_student(data_source, name, context)"},{"path":"/reference/sql_validate_student.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Validation SQL — sql_validate_student","text":"data_source server full . Edify name name want SQL file sql folder. context context project.  \"project\", \"shiny\", \"sandbox\"","code":""},{"path":"/reference/sql_validate_student.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Validation SQL — sql_validate_student","text":"sql file SQL folder","code":""},{"path":"/reference/sql_validate_student_courses.html","id":null,"dir":"Reference","previous_headings":"","what":"sql_validate_student_courses will generate the standard sql query for pulling Student Course Validations from Edify.\nValidations are done through Edify. — sql_validate_student_courses","title":"sql_validate_student_courses will generate the standard sql query for pulling Student Course Validations from Edify.\nValidations are done through Edify. — sql_validate_student_courses","text":"sql_validate_student_courses generate standard sql query pulling Student Course Validations Edify. Validations done Edify.","code":""},{"path":"/reference/sql_validate_student_courses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sql_validate_student_courses will generate the standard sql query for pulling Student Course Validations from Edify.\nValidations are done through Edify. — sql_validate_student_courses","text":"","code":"sql_validate_student_courses(data_source, name, context)"},{"path":"/reference/sql_validate_student_courses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sql_validate_student_courses will generate the standard sql query for pulling Student Course Validations from Edify.\nValidations are done through Edify. — sql_validate_student_courses","text":"data_source server full . Edify name name want SQL file sql folder. context context project.  \"project\", \"shiny\", \"sandbox\"","code":""},{"path":"/reference/sql_validate_student_courses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sql_validate_student_courses will generate the standard sql query for pulling Student Course Validations from Edify.\nValidations are done through Edify. — sql_validate_student_courses","text":"sql file SQL folder","code":""},{"path":"/reference/write_sql_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Write SQL Files Functions — write_sql_file","title":"Write SQL Files Functions — write_sql_file","text":"write_sql_files copy move sql file based context parameter.","code":""},{"path":"/reference/write_sql_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write SQL Files Functions — write_sql_file","text":"","code":"write_sql_file(file, folder, name, context)"},{"path":"/reference/write_sql_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write SQL Files Functions — write_sql_file","text":"file name sql file folder name folder sql stored name name sql file want create context context project.  \"project\", \"shiny\", \"sandbox\"","code":""}]
